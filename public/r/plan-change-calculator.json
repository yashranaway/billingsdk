{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "plan-change-calculator",
  "type": "registry:block",
  "title": "Plan Change Calculator",
  "description": "Interactive component that calculates billing adjustments when users change subscription plans, featuring cost breakdowns, credits, prorated charges, and date picker for change timing",
  "dependencies": [
    "lucide-react",
    "class-variance-authority",
    "motion"
  ],
  "registryDependencies": [
    "button",
    "card",
    "badge",
    "separator",
    "input",
    "label",
    "utils"
  ],
  "files": [
    {
      "path": "src/registry/billingsdk/plan-change-calculator.tsx",
      "content": "\"use client\";\n\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport { motion } from \"motion/react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { ArrowRight, Calendar, CreditCard, Calculator, Clock, Loader2, TrendingUp, TrendingDown, CalendarDays } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { Plan, Subscription, Coupon, Tax, ProrationQuote, BillingProvider } from \"@/lib/billing-core/types\";\nimport { ProrationEngine } from \"@/lib/billing-core/proration-engine\";\nimport { mockProvider, mockPlans, mockCoupons, mockTaxRates, MockBillingProvider } from \"@/lib/providers/mock-adapter\";\n\nconst planChangeCalculatorVariants = cva(\"w-full max-w-4xl mx-auto\", {\n  variants: {\n    variant: {\n      default: \"space-y-6\",\n      compact: \"space-y-4\",\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n  },\n});\n\nexport interface PlanChangeCalculatorProps extends VariantProps<typeof planChangeCalculatorVariants> {\n  className?: string;\n  provider?: BillingProvider;\n  subscription?: Subscription;\n  currentPlan?: Plan;\n  newPlan?: Plan;\n  changeDate?: Date;\n  coupon?: Coupon;\n  tax?: Tax;\n  onConfirm?: (quote: ProrationQuote) => void;\n  onCancel?: () => void;\n  showControls?: boolean;\n  showDatePicker?: boolean;\n}\n\nexport function PlanChangeCalculator({\n  className,\n  provider = mockProvider,\n  subscription,\n  currentPlan,\n  newPlan,\n  changeDate,\n  coupon,\n  tax,\n  onConfirm,\n  onCancel,\n  showControls = true,\n  showDatePicker = true,\n  variant = \"default\",\n}: PlanChangeCalculatorProps) {\n  const [quote, setQuote] = useState<ProrationQuote | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedChangeDate, setSelectedChangeDate] = useState<Date>(changeDate || new Date());\n  const [showDateInput, setShowDateInput] = useState(false);\n\n  // Use memoized defaults to prevent infinite re-renders\n  const defaultSubscription = useMemo(() => \n    subscription || MockBillingProvider.createMockSubscription('starter'), \n    [subscription]\n  );\n  const defaultCurrentPlan = useMemo(() => \n    currentPlan || mockPlans[0], \n    [currentPlan]\n  );\n  const defaultNewPlan = useMemo(() => \n    newPlan || mockPlans[1], \n    [newPlan]\n  );\n\n  useEffect(() => {\n    async function computeQuote() {\n      if (!defaultCurrentPlan || !defaultNewPlan) {\n        return;\n      }\n      \n      setLoading(true);\n      setError(null);\n      \n      try {\n        const result = await provider.computeProrationQuote(\n          defaultSubscription,\n          defaultCurrentPlan,\n          defaultNewPlan,\n          selectedChangeDate,\n          coupon,\n          tax\n        );\n        setQuote(result);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Failed to compute quote');\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    computeQuote();\n  }, [provider, defaultSubscription, defaultCurrentPlan, defaultNewPlan, selectedChangeDate, coupon, tax]);\n\n  const planDifference = defaultCurrentPlan && defaultNewPlan \n    ? ProrationEngine.calculatePlanDifference(defaultCurrentPlan, defaultNewPlan)\n    : null;\n\n  const formatDate = (date: Date) => {\n    return date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  const handleDateChange = (dateString: string) => {\n    const newDate = new Date(dateString);\n    if (!isNaN(newDate.getTime())) {\n      setSelectedChangeDate(newDate);\n      setShowDateInput(false);\n    }\n  };\n\n  const getQuickDateOptions = () => {\n    const today = new Date();\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    \n    const nextWeek = new Date(today);\n    nextWeek.setDate(nextWeek.getDate() + 7);\n    \n    const nextMonth = new Date(today);\n    nextMonth.setMonth(nextMonth.getMonth() + 1);\n    nextMonth.setDate(1);\n\n    return [\n      { label: 'Today', value: today, description: 'Immediate change' },\n      { label: 'Tomorrow', value: tomorrow, description: 'Next business day' },\n      { label: 'Next Week', value: nextWeek, description: 'In 7 days' },\n      { label: 'Next Month', value: nextMonth, description: 'Start of next month' },\n    ];\n  };\n\n  if (loading) {\n    return (\n      <div className={cn(planChangeCalculatorVariants({ variant }), className)}>\n        <Card>\n          <CardContent className=\"flex items-center justify-center py-12\">\n            <div className=\"flex items-center gap-2 text-muted-foreground\">\n              <Loader2 className=\"h-4 w-4 animate-spin\" />\n              Computing plan change quote...\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className={cn(planChangeCalculatorVariants({ variant }), className)}>\n        <Card>\n          <CardContent className=\"py-12\">\n            <div className=\"text-center text-destructive\">\n              <p>Error: {error}</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (!quote) {\n    return null;\n  }\n\n  return (\n    <div className={cn(planChangeCalculatorVariants({ variant }), className)}>\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Calculator className=\"h-5 w-5 text-primary\" />\n            Plan Change Calculator\n          </CardTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            Review the charges and credits for your plan change\n          </p>\n        </CardHeader>\n\n        <CardContent className=\"space-y-6\">\n          {/* Date Picker Section */}\n          {showDatePicker && (\n            <motion.div\n              initial={{ opacity: 0, y: -10 }}\n              animate={{ opacity: 1, y: 0 }}\n              className=\"p-4 rounded-lg border bg-muted/20\"\n            >\n              <div className=\"flex items-center justify-between mb-3\">\n                <Label className=\"text-sm font-medium flex items-center gap-2\">\n                  <CalendarDays className=\"h-4 w-4\" />\n                  Change Effective Date\n                </Label>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setShowDateInput(!showDateInput)}\n                  className=\"text-xs\"\n                >\n                  {showDateInput ? 'Quick Options' : 'Custom Date'}\n                </Button>\n              </div>\n\n              {showDateInput ? (\n                <div className=\"space-y-3\">\n                  <Input\n                    type=\"date\"\n                    value={selectedChangeDate.toISOString().split('T')[0]}\n                    onChange={(e) => handleDateChange(e.target.value)}\n                    className=\"w-full\"\n                    min={new Date().toISOString().split('T')[0]}\n                  />\n                </div>\n              ) : (\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2\">\n                  {getQuickDateOptions().map((option) => (\n                    <Button\n                      key={option.label}\n                      variant={selectedChangeDate.toDateString() === option.value.toDateString() ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={() => setSelectedChangeDate(option.value)}\n                      className=\"flex flex-col items-center p-3 h-auto\"\n                    >\n                      <span className=\"text-xs font-medium\">{option.label}</span>\n                      <span className=\"text-xs text-muted-foreground\">{formatDate(option.value)}</span>\n                    </Button>\n                  ))}\n                </div>\n              )}\n            </motion.div>\n          )}\n\n          {/* Plan Comparison */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 items-center\">\n            {/* Current Plan */}\n            <motion.div\n              initial={{ opacity: 0, x: -20 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"p-4 rounded-lg border bg-muted/50\"\n            >\n              <div className=\"flex items-center gap-2 mb-2\">\n                <Badge variant=\"outline\" className=\"text-xs\">Current</Badge>\n                {planDifference?.type === 'downgrade' && (\n                  <Badge variant=\"secondary\" className=\"text-xs\">\n                    <TrendingDown className=\"h-3 w-3 mr-1\" />\n                    Downgrade\n                  </Badge>\n                )}\n              </div>\n              <h3 className=\"font-semibold\">{quote.currentPlan.name}</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                {ProrationEngine.formatCurrency(quote.currentPlan.price, quote.currentPlan.currency)}/{quote.currentPlan.interval}\n              </p>\n              <div className=\"flex items-center gap-1 text-xs text-muted-foreground mt-2\">\n                <Clock className=\"h-3 w-3\" />\n                {Math.ceil((quote.nextBillingDate.getTime() - quote.changeDate.getTime()) / (1000 * 60 * 60 * 24))} days remaining\n              </div>\n            </motion.div>\n\n            {/* Arrow */}\n            <div className=\"flex justify-center\">\n              <motion.div\n                initial={{ scale: 0 }}\n                animate={{ scale: 1 }}\n                transition={{ delay: 0.2 }}\n                className=\"p-2 rounded-full bg-primary/10 text-primary\"\n              >\n                <ArrowRight className=\"h-4 w-4\" />\n              </motion.div>\n            </div>\n\n            {/* New Plan */}\n            <motion.div\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.1 }}\n              className=\"p-4 rounded-lg border bg-primary/5 border-primary/30\"\n            >\n              <div className=\"flex items-center gap-2 mb-2\">\n                <Badge className=\"text-xs\">New Plan</Badge>\n                {planDifference?.type === 'upgrade' && (\n                  <Badge variant=\"secondary\" className=\"text-xs\">\n                    <TrendingUp className=\"h-3 w-3 mr-1\" />\n                    Upgrade\n                  </Badge>\n                )}\n              </div>\n              <h3 className=\"font-semibold\">{quote.newPlan.name}</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                {ProrationEngine.formatCurrency(quote.newPlan.price, quote.newPlan.currency)}/{quote.newPlan.interval}\n              </p>\n              <div className=\"flex items-center gap-1 text-xs text-muted-foreground mt-2\">\n                <Calendar className=\"h-3 w-3\" />\n                Effective {formatDate(selectedChangeDate)}\n              </div>\n            </motion.div>\n          </div>\n\n          <Separator />\n\n          {/* Billing Breakdown */}\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.4 }}\n            className=\"p-4 rounded-lg border bg-muted/30\"\n          >\n            <h4 className=\"font-medium mb-4 flex items-center gap-2\">\n              <CreditCard className=\"h-4 w-4\" />\n              Billing Breakdown\n            </h4>\n            \n            <div className=\"space-y-3\">\n              {quote.adjustments.map((adjustment, index) => (\n                <div key={index} className=\"flex justify-between items-center text-sm\">\n                  <span className=\"text-muted-foreground\">{adjustment.description}</span>\n                  <span className={cn(\n                    \"font-medium\",\n                    adjustment.type === 'credit' ? \"text-green-600\" : \"text-foreground\"\n                  )}>\n                    {adjustment.type === 'credit' ? '-' : '+'}\n                    {ProrationEngine.formatCurrency(adjustment.amount, quote.currency)}\n                  </span>\n                </div>\n              ))}\n              \n              {quote.couponDiscount > 0 && (\n                <div className=\"flex justify-between items-center text-sm\">\n                  <span className=\"text-muted-foreground\">Coupon discount</span>\n                  <span className=\"text-green-600 font-medium\">\n                    -{ProrationEngine.formatCurrency(quote.couponDiscount, quote.currency)}\n                  </span>\n                </div>\n              )}\n              \n              {quote.taxAmount > 0 && (\n                <div className=\"flex justify-between items-center text-sm\">\n                  <span className=\"text-muted-foreground\">Tax</span>\n                  <span className=\"font-medium\">\n                    +{ProrationEngine.formatCurrency(quote.taxAmount, quote.currency)}\n                  </span>\n                </div>\n              )}\n              \n              <Separator />\n              \n              <div className=\"flex justify-between items-center font-semibold\">\n                <span>\n                  {quote.total >= 0 ? \"Amount to charge\" : \"Credit to account\"}\n                </span>\n                <span className={cn(\n                  \"text-lg\",\n                  quote.total >= 0 ? \"text-foreground\" : \"text-green-600\"\n                )}>\n                  {ProrationEngine.formatCurrency(Math.abs(quote.total), quote.currency)}\n                </span>\n              </div>\n            </div>\n          </motion.div>\n\n          {/* Summary */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 0.6 }}\n            className=\"text-center p-3 bg-muted/20 rounded-lg border\"\n          >\n            <p className=\"text-sm text-muted-foreground\">\n              Your plan will change on {formatDate(selectedChangeDate)}. \n              {quote.total > 0 \n                ? ` You'll be charged ${ProrationEngine.formatCurrency(quote.total, quote.currency)}.`\n                : quote.total < 0\n                ? ` You'll receive a ${ProrationEngine.formatCurrency(Math.abs(quote.total), quote.currency)} credit.`\n                : ' No additional charge.'\n              }\n            </p>\n          </motion.div>\n\n          {/* Action Buttons */}\n          {showControls && (\n            <motion.div\n              initial={{ opacity: 0, y: 10 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.8 }}\n              className=\"flex flex-col sm:flex-row gap-3\"\n            >\n              <Button\n                onClick={() => onConfirm?.(quote)}\n                className=\"flex-1\"\n                size=\"lg\"\n              >\n                Confirm Change\n                <ArrowRight className=\"ml-2 h-4 w-4\" />\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={onCancel}\n                className=\"flex-1\"\n                size=\"lg\"\n              >\n                Cancel\n              </Button>\n            </motion.div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}",
      "type": "registry:component",
      "target": "components/billingsdk/plan-change-calculator.tsx"
    },
    {
      "path": "src/registry/billingsdk/demo/plan-change-calculator-demo.tsx",
      "content": "\"use client\";\n\nimport { PlanChangeCalculator } from \"@/components/billingsdk/plan-change-calculator\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\nexport function PlanChangeCalculatorDemo() {\n  return (\n    <div className=\"space-y-8\">\n      <Tabs defaultValue=\"upgrade\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"upgrade\">Upgrade</TabsTrigger>\n          <TabsTrigger value=\"downgrade\">Downgrade</TabsTrigger>\n          <TabsTrigger value=\"cycle-change\">Cycle Change</TabsTrigger>\n          <TabsTrigger value=\"next-cycle\">Next Cycle</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"upgrade\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Monthly to Enterprise Upgrade</CardTitle>\n              <CardDescription>\n                Upgrading from Pro monthly to Enterprise monthly with 15 days remaining\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <PlanChangeCalculator\n                currentPlan={{\n                  id: \"pro\",\n                  name: \"Pro\",\n                  price: 29.99,\n                  currency: \"USD\",\n                  interval: \"month\",\n                  intervalCount: 1,\n                  features: [\"Advanced features\", \"Priority support\"]\n                }}\n                newPlan={{\n                  id: \"enterprise\",\n                  name: \"Enterprise\", \n                  price: 99.99,\n                  currency: \"USD\",\n                  interval: \"month\",\n                  intervalCount: 1,\n                  features: [\"All features\", \"Priority support\", \"Custom integrations\"]\n                }}\n                onConfirm={() => console.log(\"Upgrade confirmed\")}\n                onCancel={() => console.log(\"Upgrade cancelled\")}\n              />\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"downgrade\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Enterprise to Basic Downgrade</CardTitle>\n              <CardDescription>\n                Downgrading from Enterprise to Basic with account credit\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <PlanChangeCalculator\n                currentPlan={{\n                  id: \"enterprise\",\n                  name: \"Enterprise\",\n                  price: 99.99,\n                  currency: \"USD\",\n                  interval: \"month\",\n                  intervalCount: 1,\n                  features: [\"All features\", \"Priority support\", \"Custom integrations\"]\n                }}\n                newPlan={{\n                  id: \"basic\",\n                  name: \"Basic\",\n                  price: 9.99,\n                  currency: \"USD\", \n                  interval: \"month\",\n                  intervalCount: 1,\n                  features: [\"Basic features\", \"Email support\"]\n                }}\n                onConfirm={() => console.log(\"Downgrade confirmed\")}\n                onCancel={() => console.log(\"Downgrade cancelled\")}\n              />\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"cycle-change\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Monthly to Yearly Switch</CardTitle>\n              <CardDescription>\n                Switching from monthly to yearly billing for the same plan\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <PlanChangeCalculator\n                currentPlan={{\n                  id: \"pro\",\n                  name: \"Pro\",\n                  price: 29.99,\n                  currency: \"USD\",\n                  interval: \"month\",\n                  intervalCount: 1,\n                  features: [\"Advanced features\", \"Priority support\"]\n                }}\n                newPlan={{\n                  id: \"pro-yearly\",\n                  name: \"Pro\",\n                  price: 299.99,\n                  currency: \"USD\",\n                  interval: \"year\",\n                  intervalCount: 1,\n                  features: [\"Advanced features\", \"Priority support\"]\n                }}\n                onConfirm={() => console.log(\"Cycle change confirmed\")}\n                onCancel={() => console.log(\"Cycle change cancelled\")}\n              />\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"next-cycle\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Next Cycle Change</CardTitle>\n              <CardDescription>\n                Plan change effective at the next billing cycle with no immediate charge\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <PlanChangeCalculator\n                currentPlan={{\n                  id: \"pro\",\n                  name: \"Pro\",\n                  price: 29.99,\n                  currency: \"USD\",\n                  interval: \"month\",\n                  intervalCount: 1,\n                  features: [\"Advanced features\", \"Priority support\"]\n                }}\n                newPlan={{\n                  id: \"enterprise\",\n                  name: \"Enterprise\",\n                  price: 99.99,\n                  currency: \"USD\",\n                  interval: \"month\",\n                  intervalCount: 1,\n                  features: [\"All features\", \"Priority support\", \"Custom integrations\"]\n                }}\n                onConfirm={() => console.log(\"Next cycle change confirmed\")}\n                onCancel={() => console.log(\"Next cycle change cancelled\")}\n              />\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}",
      "type": "registry:component",
      "target": "components/plan-change-calculator-demo.tsx"
    }
  ]
}
