{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "cancel-subscription-card-two",
  "type": "registry:block",
  "title": "Cancel Subscription Card Two",
  "description": "A modern cancel subscription card component with confirmation flow",
  "dependencies": [
    "lucide-react",
    "react-icons"
  ],
  "registryDependencies": [
    "button",
    "badge",
    "card",
    "utils"
  ],
  "files": [
    {
      "path": "src/registry/billingsdk/cancel-subscription-card-two.tsx",
      "content": "\"use client\";\n\nimport { useState } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport { type Plan } from \"@/lib/billingsdk-config\";\nimport { cn } from \"@/lib/utils\";\nimport { ArrowRight, ChevronDown, Info, Zap } from \"lucide-react\";\nimport { BiSupport } from \"react-icons/bi\";\n\nexport interface CancelSubscriptionCardTwoProps {\n    title: string;\n    description: string;\n    plan: Plan;\n    warningText?: string;\n    supportText?: string;\n    supportLink?: string;\n    keepButtonText?: string;\n    continueButtonText?: string;\n    finalTitle?: string;\n    finalSubtitle?: string;\n    goBackButtonText?: string;\n    confirmButtonText?: string;\n    onCancel: (planId: string) => Promise<void> | void;\n    onKeepSubscription?: (planId: string) => Promise<void> | void;\n    className?: string;\n}\n\nexport function CancelSubscriptionCardTwo({\n    title,\n    description,\n    plan,\n    warningText,\n    supportText,\n    keepButtonText,\n    continueButtonText,\n    finalTitle,\n    finalSubtitle,\n    supportLink,\n    goBackButtonText,\n    confirmButtonText,\n    onCancel,\n    onKeepSubscription,\n    className,\n}: CancelSubscriptionCardTwoProps) {\n    const [showFinalConfirmation, setShowFinalConfirmation] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState<string | null>(null);\n    const [showBenefits, setShowBenefits] = useState(true);\n\n    const handleContinueCancellation = () => {\n        setShowFinalConfirmation(true);\n        setError(null);\n    };\n\n    const handleKeepSubscription = async () => {\n        try {\n            setIsLoading(true);\n            setError(null);\n            if (onKeepSubscription) {\n                await onKeepSubscription(plan.id);\n            }\n        } catch (err) {\n            setError(err instanceof Error ? err.message : 'Failed to keep subscription');\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const handleBack = () => {\n        setShowFinalConfirmation(false);\n        setError(null);\n    };\n\n    const handleConfirmCancellation = async () => {\n        try {\n            setIsLoading(true);\n            setError(null);\n            if (onCancel) {\n                await onCancel(plan.id);\n            }\n        } catch (err) {\n            setError(err instanceof Error ? err.message : 'Failed to cancel subscription');\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    return (\n        <Card className={cn(\"sm:max-w-[500px] flex flex-col md:flex-row overflow-hidden w-full\", className)}>\n            <CardContent className={cn(\"px-4 flex flex-col gap-4 w-full\")}> \n                {!showFinalConfirmation && (\n                    <>\n                        <div className=\"flex justify-end\">\n                            <span className=\"text-destructive\">Cancel Plan</span>\n                        </div>\n                        <div className=\"flex flex-col gap-2 text-center md:text-left pl-4\">\n                            <h2 className=\"text-lg sm:text-2xl font-semibold\">{title}</h2>\n                            <p className=\"md:text-sm text-xs text-muted-foreground\">{description}</p>\n                            {error && (\n                                <div className=\"p-3 bg-destructive/10 border border-destructive/20 rounded-md\">\n                                    <p className=\"text-sm text-destructive\">{error}</p>\n                                </div>\n                            )}\n                        </div>\n                    </>\n                )}\n\n                {/* Subscription Details */}\n                {!showFinalConfirmation && (\n                    <div className=\"flex flex-col gap-4 p-4 bg-muted/50 rounded-lg\">\n                        <div className=\"flex items-center justify-between\">\n                            <div className=\"flex text-left\">\n                                <p className=\"text-sm sm:text-lg\">Current Subscription:</p>\n                            </div>\n                            <div className=\"flex flex-col gap-1\">\n                                <p className=\"font-semibold text-sm sm:text-lg\">{plan.title} Plan</p>\n                                <Badge variant=\"secondary\">\n                                    {parseFloat(plan.monthlyPrice) >= 0 ? `${plan.currency}${plan.monthlyPrice}/monthly` : `${plan.monthlyPrice}/monthly`}\n                                </Badge>\n                            </div>\n                        </div>\n                        <div className=\"flex flex-col gap-2\">\n                            <Button\n                                variant=\"ghost\"\n                                className=\"flex justify-between items-center text-sm font-medium cursor-pointer transition-colors\"\n                                onClick={() => setShowBenefits(!showBenefits)}\n                            >\n                                <span>Your Current Plan Benefits:</span>\n                                <ChevronDown className={cn(\"w-4 h-4 transition-transform\", showBenefits && \"rotate-180\")} />\n                            </Button>\n                            {showBenefits && (\n                                <>\n                                    {plan.features.slice(0, 4).map((feature, index) => (\n                                        <div key={index} className=\"flex items-center gap-2 pl-3\">\n                                            <Zap className=\"w-4 h-4 fill-primary text-primary\" />\n                                            <span className=\"text-sm text-muted-foreground\">{feature.name}</span>\n                                        </div>\n                                    ))}\n                                </>\n                            )}\n                            <div className=\"mt-5 border-t border-border pt-5\">\n                                {supportText && (\n                                    <div className=\"flex justify-end\">\n                                        <p className=\"text-sm text-muted-foreground\">{supportText}</p>\n                                    </div>\n                                )}\n                                {supportLink && (\n                                    <div className=\"flex items-center gap-2 justify-end pt-5\">\n                                        <BiSupport className=\"w-4 h-4\" />\n                                        <a\n                                            href={supportLink?.toString()}\n                                            className=\"text-xs sm:text-sm text-muted-foreground hover:text-primary transition-colors\"\n                                        >\n                                            Contact Support\n                                        </a>\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                )}\n\n                {!showFinalConfirmation ? (\n                    <div className=\"flex flex-col sm:flex-row gap-3 mt-auto\">\n                        <Button\n                            className=\"flex-1\"\n                            onClick={handleKeepSubscription}\n                            disabled={isLoading}\n                        >\n                            {isLoading ? \"Processing...\" : (keepButtonText || \"Keep My Subscription\")}\n                        </Button>\n                        <Button\n                            variant=\"ghost\"\n                            className=\"flex-1\"\n                            onClick={handleContinueCancellation}\n                            disabled={isLoading}\n                        >\n                            {continueButtonText || \"Continue Cancellation\"}\n                        </Button>\n                    </div>\n                ) : (\n                    <div className=\"flex flex-col gap-4\">\n                        <div className=\"p-1 rounded-lg\">\n                            <div className=\"border-b\">\n                                <h4 className=\"font-semibold text-lg sm:text-xl mb-2 text-foreground text-center\">\n                                    {finalTitle || \"You are about to cancel your subscription\"}\n                                </h4>\n                                <p className=\"text-xs sm:text-sm text-muted-foreground mb-4 text-center\">\n                                    {finalSubtitle || \"You'll lose access to all Pro features and your data will be permanently deleted after 30 days.\"}\n                                </p>\n                            </div>\n                            <div className=\"flex flex-col gap-2 sm:ml-6 py-4\">\n                                <p className=\"text-base font-medium text-foreground py-2.5\">\n                                    Keep your plan to continue enjoying these benefits:\n                                </p>\n                                {plan.features.slice(0, 4).map((feature, index) => (\n                                    <div key={index} className=\"flex items-center gap-2 pl-3\">\n                                        <Zap className=\"w-4 h-4 fill-primary text-primary\" />\n                                        <p className=\"text-sm text-muted-foreground\">{feature.name}</p>\n                                    </div>\n                                ))}\n                            </div>\n                            <div className=\"flex items-start mt-6 p-2 bg-destructive/10 border border-red-400/20 rounded-lg gap-3\">\n                                <Info className=\"w-4 h-4 text-destructive mt-1 flex-shrink-0\" />\n                                <p className=\"text-sm text-destructive\">\n                                    {warningText || \"This action will immediately cancel your subscription.\"}\n                                </p>\n                            </div>\n                        </div>\n                        <div className=\"flex flex-col gap-3\">\n                            <Button\n                                className=\"w-full\"\n                                onClick={handleBack}\n                                disabled={isLoading}\n                            >\n                                {goBackButtonText || \"Never mind\"}\n                            </Button>\n                            <div className=\"flex justify-center\">\n                                <Button\n                                    variant=\"ghost\"\n                                    onClick={handleConfirmCancellation}\n                                    disabled={isLoading}\n                                    className=\"w-fit text-muted-foreground hover:text-destructive\"\n                                >\n                                    <span className=\"flex items-center gap-2\">\n                                        {isLoading ? \"Cancelling...\" : (confirmButtonText || \"Cancel My Subscription\")}\n                                        {!isLoading && <ArrowRight className=\"w-3 h-3 mt-1\" />}\n                                    </span>\n                                </Button>\n                            </div>\n                        </div>\n                    </div>\n                )}\n            </CardContent>\n        </Card>\n    )\n}\n",
      "type": "registry:component",
      "target": "components/billingsdk/cancel-subscription-card-two.tsx"
    },
    {
      "path": "src/registry/billingsdk/demo/cancel-subscription-card-two-demo.tsx",
      "content": "\"use client\";\n\nimport { CancelSubscriptionCardTwo } from \"@/components/billingsdk/cancel-subscription-card-two\";\nimport { plans } from \"@/lib/billingsdk-config\";\n\nexport function CancelSubscriptionCardTwoDemo() {\n  return (\n    <div className=\"flex flex-col w-full\">\n      <CancelSubscriptionCardTwo\n        title=\"We're sorry to see you go...\"\n        description={`Before you cancel, we hope you'll consider staying on the ${plans[1].title} plan.`}\n        plan={plans[1]}\n        supportText=\"Need help with your subscription?\"\n        supportLink=\"https://support.example.com\"\n        keepButtonText={`Keep My ${plans[1].title} Plan`}\n        continueButtonText=\"Continue with Cancellation\"\n        finalTitle=\"Final Step - Confirm Cancellation\"\n        finalSubtitle=\"You'll lose access immediately after confirmation.\"\n        goBackButtonText=\"Wait, Go Back\"\n        confirmButtonText=\"Yes, Cancel My Subscription\"\n        onCancel={async (planId) => {\n          console.log('Cancelling subscription for plan:', planId);\n          return new Promise((resolve) => setTimeout(resolve, 1000));\n        }}\n        onKeepSubscription={async (planId) => {\n          console.log('Keeping subscription for plan:', planId);\n        }}\n        className=\"max-w-4xl\"\n      />\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/cancel-subscription-card-two-demo.tsx"
    },
    {
      "path": "src/registry/lib/billingsdk-config.ts",
      "content": "export interface Plan {\n    id: string\n    title: string\n    description: string\n    highlight?: boolean\n    type?: 'monthly' | 'yearly'\n    currency?: string\n    monthlyPrice: string\n    yearlyPrice: string\n    buttonText: string\n    badge?: string\n    features: {\n        name: string\n        icon: string\n        iconColor?: string\n    }[]\n}\n\nexport interface CurrentPlan {\n    plan: Plan\n    type: 'monthly' | 'yearly' | 'custom'\n    price?: string\n    nextBillingDate: string\n    paymentMethod: string\n    status: 'active' | 'inactive' | 'past_due' | 'cancelled'\n}\n\nexport const plans: Plan[] = [\n    {\n        id: 'starter',\n        title: 'Starter',\n        description: 'For developers testing out Liveblocks locally.',\n        currency: '$',\n        monthlyPrice: '0',\n        yearlyPrice: '0',\n        buttonText: 'Start today for free',\n        features: [\n            {\n                name: 'Presence',\n                icon: \"check\",\n                iconColor: 'text-green-500'\n            },\n            {\n                name: 'Comments',\n                icon: \"check\",\n                iconColor: 'text-orange-500'\n            },\n            {\n                name: 'Notifications',\n                icon: \"check\",\n                iconColor: 'text-teal-500'\n            },\n            {\n                name: 'Text Editor',\n                icon: \"check\",\n                iconColor: 'text-blue-500'\n            },\n            {\n                name: 'Sync Datastore',\n                icon: \"check\",\n                iconColor: 'text-zinc-500'\n            }\n        ],\n    },\n    {\n        id: 'pro',\n        title: 'Pro',\n        description: 'For companies adding collaboration in production.',\n        currency: '$',\n        monthlyPrice: '20',\n        yearlyPrice: '199',\n        buttonText: 'Sign up',\n        badge: 'Most popular',\n        highlight: true,\n        features: [\n            {\n                name: 'Presence',\n                icon: \"check\",\n                iconColor: 'text-green-500'\n            },\n            {\n                name: 'Comments',\n                icon: \"check\",\n                iconColor: 'text-orange-500'\n            },\n            {\n                name: 'Notifications',\n                icon: \"check\",\n                iconColor: 'text-teal-500'\n            },\n            {\n                name: 'Text Editor',\n                icon: \"check\",\n                iconColor: 'text-blue-500'\n            },\n            {\n                name: 'Sync Datastore',\n                icon: \"check\",\n                iconColor: 'text-zinc-500'\n            }\n        ],\n    },\n    {\n        id: 'enterprise',\n        title: 'Enterprise',\n        description: 'For organizations that need more support and compliance features.',\n        currency: '$',\n        monthlyPrice: 'Custom',\n        yearlyPrice: 'Custom',\n        buttonText: 'Contact sales',\n        features: [\n            {\n                name: 'Presence',\n                icon: \"check\",\n                iconColor: 'text-green-500'\n            },\n            {\n                name: 'Comments',\n                icon: \"check\",\n                iconColor: 'text-orange-500'\n            },\n            {\n                name: 'Notifications',\n                icon: \"check\",\n                iconColor: 'text-teal-500'\n            },\n            {\n                name: 'Text Editor',\n                icon: \"check\",\n                iconColor: 'text-blue-500'\n            },\n            {\n                name: 'Sync Datastore',\n                icon: \"check\",\n                iconColor: 'text-zinc-500'\n            }\n        ],\n    }\n];\n",
      "type": "registry:lib",
      "target": "lib/billingsdk-config.ts"
    } 
  ]
}
